// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMANDREQUEST_KOTITONTTU_COMMANDREQUEST_H_
#define FLATBUFFERS_GENERATED_COMMANDREQUEST_KOTITONTTU_COMMANDREQUEST_H_

#include "flatbuffers/flatbuffers.h"

namespace Kotitonttu {
namespace CommandRequest {

struct CommandRequest;
struct CommandRequestBuilder;

enum LightCommand : int8_t {
  LightCommand_NoOp = 0,
  LightCommand_Toggle = 1,
  LightCommand_TurnOn = 2,
  LightCommand_TurnOff = 3,
  LightCommand_SetToLevel = 4,
  LightCommand_MIN = LightCommand_NoOp,
  LightCommand_MAX = LightCommand_SetToLevel
};

inline const LightCommand (&EnumValuesLightCommand())[5] {
  static const LightCommand values[] = {
    LightCommand_NoOp,
    LightCommand_Toggle,
    LightCommand_TurnOn,
    LightCommand_TurnOff,
    LightCommand_SetToLevel
  };
  return values;
}

inline const char * const *EnumNamesLightCommand() {
  static const char * const names[6] = {
    "NoOp",
    "Toggle",
    "TurnOn",
    "TurnOff",
    "SetToLevel",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightCommand(LightCommand e) {
  if (flatbuffers::IsOutRange(e, LightCommand_NoOp, LightCommand_SetToLevel)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightCommand()[index];
}

enum RoomType : int8_t {
  RoomType_Entrance = 0,
  RoomType_LivingRoom = 1,
  RoomType_ComputerRoom = 2,
  RoomType_Kitchen = 3,
  RoomType_BedRoom = 4,
  RoomType_MIN = RoomType_Entrance,
  RoomType_MAX = RoomType_BedRoom
};

inline const RoomType (&EnumValuesRoomType())[5] {
  static const RoomType values[] = {
    RoomType_Entrance,
    RoomType_LivingRoom,
    RoomType_ComputerRoom,
    RoomType_Kitchen,
    RoomType_BedRoom
  };
  return values;
}

inline const char * const *EnumNamesRoomType() {
  static const char * const names[6] = {
    "Entrance",
    "LivingRoom",
    "ComputerRoom",
    "Kitchen",
    "BedRoom",
    nullptr
  };
  return names;
}

inline const char *EnumNameRoomType(RoomType e) {
  if (flatbuffers::IsOutRange(e, RoomType_Entrance, RoomType_BedRoom)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRoomType()[index];
}

struct CommandRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CommandRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SWITCH_ = 4,
    VT_ROOM = 6,
    VT_BRIGHTNESS = 8
  };
  Kotitonttu::CommandRequest::LightCommand switch_() const {
    return static_cast<Kotitonttu::CommandRequest::LightCommand>(GetField<int8_t>(VT_SWITCH_, 0));
  }
  Kotitonttu::CommandRequest::RoomType room() const {
    return static_cast<Kotitonttu::CommandRequest::RoomType>(GetField<int8_t>(VT_ROOM, 0));
  }
  int32_t brightness() const {
    return GetField<int32_t>(VT_BRIGHTNESS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SWITCH_) &&
           VerifyField<int8_t>(verifier, VT_ROOM) &&
           VerifyField<int32_t>(verifier, VT_BRIGHTNESS) &&
           verifier.EndTable();
  }
};

struct CommandRequestBuilder {
  typedef CommandRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_switch_(Kotitonttu::CommandRequest::LightCommand switch_) {
    fbb_.AddElement<int8_t>(CommandRequest::VT_SWITCH_, static_cast<int8_t>(switch_), 0);
  }
  void add_room(Kotitonttu::CommandRequest::RoomType room) {
    fbb_.AddElement<int8_t>(CommandRequest::VT_ROOM, static_cast<int8_t>(room), 0);
  }
  void add_brightness(int32_t brightness) {
    fbb_.AddElement<int32_t>(CommandRequest::VT_BRIGHTNESS, brightness, 0);
  }
  explicit CommandRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CommandRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CommandRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CommandRequest> CreateCommandRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    Kotitonttu::CommandRequest::LightCommand switch_ = Kotitonttu::CommandRequest::LightCommand_NoOp,
    Kotitonttu::CommandRequest::RoomType room = Kotitonttu::CommandRequest::RoomType_Entrance,
    int32_t brightness = 0) {
  CommandRequestBuilder builder_(_fbb);
  builder_.add_brightness(brightness);
  builder_.add_room(room);
  builder_.add_switch_(switch_);
  return builder_.Finish();
}

inline const Kotitonttu::CommandRequest::CommandRequest *GetCommandRequest(const void *buf) {
  return flatbuffers::GetRoot<Kotitonttu::CommandRequest::CommandRequest>(buf);
}

inline const Kotitonttu::CommandRequest::CommandRequest *GetSizePrefixedCommandRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Kotitonttu::CommandRequest::CommandRequest>(buf);
}

inline bool VerifyCommandRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Kotitonttu::CommandRequest::CommandRequest>(nullptr);
}

inline bool VerifySizePrefixedCommandRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Kotitonttu::CommandRequest::CommandRequest>(nullptr);
}

inline void FinishCommandRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Kotitonttu::CommandRequest::CommandRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCommandRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Kotitonttu::CommandRequest::CommandRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CommandRequest
}  // namespace Kotitonttu

#endif  // FLATBUFFERS_GENERATED_COMMANDREQUEST_KOTITONTTU_COMMANDREQUEST_H_
